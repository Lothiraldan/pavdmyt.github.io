<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text" xml:lang="en">Stochastic Stuff by Pavel Dmytrenko</title>
  <link type="application/atom+xml" href="http://pavdmyt.com/atom.xml" rel="self"/>
  <link href="http://pavdmyt.com/"/>
  <id>http://pavdmyt.com/</id>
  <updated>2016-02-02T17:19:48Z</updated>
  <rights type="text">Copyright © 2016 Pavel Dmytrenko. All rights reserved.</rights>
  
    <entry>
      <author>
        <name>Pavel Dmytrenko</name>
        <email>mail@pavdmyt.com</email>
      </author>
      <title type="text">Jekyll development environment via Vagrant and PuPHPet</title>
      
        <category term="jekyll"/>
      
        <category term="vagrant"/>
      
        <category term="puphpet"/>
      
        <category term="blogging"/>
      
      <link rel="alternate" type="text/html" href="http://pavdmyt.com/jekyll-dev-env-via-vagrant-and-puphpet"/>
      <id>http://pavdmyt.com/Jekyll-env-via-Vagrant-PuPHPet</id>
      <published>2016-01-28T00:00:00Z</published>
      <updated>2016-01-28T00:00:00Z</updated>
      <content type="html">&lt;p&gt;It happened that I developed at both Linux and Windows machines. And as you may know, installing, building and maintaining development environments in such case is always a burden. Common solution is to keep your environment inside a virtual machine (VM). This prevents from polluting the hostbox with unnecessary software. Most importantly, we can set up our VM to mimic the production environment as closely as possible.&lt;/p&gt;

&lt;p&gt;The traditional scenario of maintaining a development VM introduces a set of routines which we prefer to avoid. First, a lot of initial setup. Second, we can easily damage our setup by making some minor changes. Third, it is difficult to share pre-configured VMs because they occupy a couple of gigabytes. This is a time consuming and error-prone process…&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We need a way to manage our development VMs and here comes &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vagrant lowers development environment setup time, increases development/production parity, and makes the “works on my machine” excuse a relic of the past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vagrant key advantages are in that it helps to automate the initial setup of a virtual machine, is available everywhere (Linux, Mac, Windows), and allows us to share VM settings by a single &lt;a href=&quot;https://www.vagrantup.com/docs/vagrantfile/&quot;&gt;&lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently I managed to set up a development environment for this blog using Vagrant complemented with &lt;a href=&quot;https://puphpet.com/&quot;&gt;PuPHTet&lt;/a&gt;. PuPHPet is a web GUI for setting up VMs for our needs. It uses &lt;a href=&quot;https://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; as the provisioning backend.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some simple configuration steps to make our lives easier and development environments more consistent.&lt;/p&gt;

&lt;h2 id=&quot;what-we-need&quot;&gt;What we need&lt;/h2&gt;

&lt;p&gt;To build static sites with Jekyll we need at least the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are running Jekyll 2 and/or hosting at &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; (&lt;em&gt;as of January 2016 GitHub Pages running Jekyll 2.4.0&lt;/em&gt;), then you’ll also need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 2.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;em&gt;virtual machine&lt;/em&gt; should also be configured to share a directory where all development happens with a &lt;em&gt;host machine&lt;/em&gt; to modify files from our host and have them automatically synced to the development VM. Another requirement is an ability to access Jekyll development server running inside a VM from the browser at host machine. This could be done by setting basic &lt;em&gt;port forwarding&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;https://www.vagrantup.com/docs/installation/&quot;&gt;installing Vagrant&lt;/a&gt; we can initialize our project:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ mkdir our_project
$ cd our_project
$ vagrant init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a &lt;code&gt;Vagrantfile&lt;/code&gt; in the current directory. It contains our virtual machine’s configuration and provisioning settings. Let’s modify it for our purposes.&lt;/p&gt;

&lt;h3 id=&quot;choosing-a-base-image-box&quot;&gt;Choosing a base image (box)&lt;/h3&gt;

&lt;p&gt;Choose a desired box from the &lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;Atlas&lt;/a&gt;. As an example I want to create my environment on top of &lt;em&gt;Debian 8 “jessie”&lt;/em&gt; which corresponds to &lt;code&gt;debian/jessie64&lt;/code&gt; in the Atlas. We have to add this box to Vagrant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ vagrant box add debian/jessie64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and set it in &lt;code&gt;Vagrantfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;config.vm.box = &amp;quot;debian/jessie64&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;shared-folders&quot;&gt;Shared folders&lt;/h3&gt;

&lt;p&gt;By default Vagrant shares directory with &lt;code&gt;Vagrantfile&lt;/code&gt; to &lt;code&gt;/vagrant&lt;/code&gt;. However we can manually set up some additional synced folders:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;config.vm.synced_folder &amp;quot;src/&amp;quot;, &amp;quot;/srv/website&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first parameter is a path to a directory on the host machine. If the path is relative, it is relative to the project root. The second parameter must be an absolute path of where to share the folder within the guest machine. This folder will be created (recursively, if it must) if it does not exist.&lt;/p&gt;

&lt;h3 id=&quot;port-forwarding&quot;&gt;Port forwarding&lt;/h3&gt;

&lt;p&gt;In order to access our Jekyll blog served by development server inside a VM using host machine web browser, we have to specify ports on the virtual machine to share via a port on the host machine:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;config.vm.network :forwarded_port, guest: 4000, host: 8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we specify &lt;code&gt;guest: 4000&lt;/code&gt; because Jekyll development server by default listens port 4000.&lt;/p&gt;

&lt;h3 id=&quot;resource-allocation&quot;&gt;Resource allocation&lt;/h3&gt;

&lt;p&gt;It is possible to specify how many RAM and CPU resources we allocate to our VM:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
  v.memory = 512
  v.cpus = 1
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h3&gt;

&lt;p&gt;Finally, let’s place our settings into &lt;code&gt;Vagrantfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = &amp;quot;debian/jessie64&amp;quot;
  config.vm.synced_folder &amp;quot;src/&amp;quot;, &amp;quot;/srv/website&amp;quot;
  config.vm.network :forwarded_port, guest: 4000, host: 8080

  config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
    v.memory = 512
    v.cpus = 1
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;provisioning&quot;&gt;Provisioning&lt;/h3&gt;

&lt;p&gt;After basic configuration is done and we have a VM running vanilla Debian “jessie”, type &lt;code&gt;vagrant ssh&lt;/code&gt; to ssh into development machine. Now we can manually install all needed packages. But then every person who used Vagrant would have to do the same thing. To avoid such inconveniences Vagrant supports &lt;em&gt;automated provisioning&lt;/em&gt;. It is possible to write a shell script to configure the host. We also can use Ansible, Chef or Puppet.&lt;/p&gt;

&lt;p&gt;Initially I’ve spent an hour to write a shell script with lots of &lt;code&gt;sudo apt-get install package_X&lt;/code&gt;, &lt;code&gt;gem install ...&lt;/code&gt;, &lt;code&gt;git clone ...&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Launched it… &lt;br /&gt;
and everything messed up!&lt;/p&gt;

&lt;p&gt;After some debugging I realized that someone probably have already encountered such difficulties and that workaround should exist. And it does!&lt;/p&gt;

&lt;h2 id=&quot;puphtet-to-the-rescue&quot;&gt;PuPHTet to the rescue!&lt;/h2&gt;

&lt;p&gt;Basically it’s a &lt;a href=&quot;https://puphpet.com/&quot;&gt;web app&lt;/a&gt; which provides GUI with everything you need to setup a virtual machine for web development. After configuration steps are done we’ll be able to download a zip archive with all prerequisites for our project. The only thing remains is to extract the archive, open terminal and &lt;code&gt;cd&lt;/code&gt; to the extracted folder. Finally, &lt;code&gt;$ vagrant up&lt;/code&gt; and go grab some tea or coffee while our development VM is being prepared.&lt;/p&gt;

&lt;p&gt;Let’s take a look at basic configuration steps for the Jekyll project.&lt;/p&gt;

&lt;h3 id=&quot;local-vm-details&quot;&gt;Local VM details&lt;/h3&gt;

&lt;p&gt;Here we choose &lt;strong&gt;Deploy to Local Host&lt;/strong&gt; as VM will live at our host machine. &lt;strong&gt;VirtualBox&lt;/strong&gt; as virtualization provider (&lt;em&gt;PuPHPet now requires VirtualBox 5 as the minimum required version&lt;/em&gt;). And specifying desired &lt;strong&gt;Distro&lt;/strong&gt;, &lt;em&gt;Ubuntu Trusty x64&lt;/em&gt; is a default selection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/vm_details.png&quot; alt=&quot;vm details&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IP, allocated RAM and CPUs, &lt;a href=&quot;https://www.vagrantup.com/docs/networking/forwarded_ports.html&quot;&gt;Port Forwarding&lt;/a&gt; settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/ip_resources_port_fwd.png&quot; alt=&quot;net resources&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By default Jekyll development server listens port 4000, however we can set any port via &lt;code&gt;--port&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ jekyll serve --port 5050&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;system-packages&quot;&gt;System Packages&lt;/h3&gt;

&lt;p&gt;List here packages you need. Here is my selection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/sys_packs.png&quot; alt=&quot;packages&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-servers-nginx-apache&quot;&gt;Web Servers: Nginx, Apache&lt;/h3&gt;

&lt;p&gt;Deselect. We don’t need them.&lt;/p&gt;

&lt;h3 id=&quot;languages&quot;&gt;Languages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt; - deselect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is needed to install Jekyll. PuPHPet proposes installation via &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; with latest available version of Ruby is 2.0.0 (&lt;em&gt;as of January 2016, Ruby 2.3.0 is available&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Personally, I prefer &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; combined with &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; which allows to install desired Jekyll version and all dependencies typing &lt;code&gt;bundle install&lt;/code&gt; in a folder with &lt;a href=&quot;http://bundler.io/v1.11/gemfile.html&quot;&gt;Gemfile&lt;/a&gt;. So, I’m skipping “&lt;em&gt;Ruby via RVM&lt;/em&gt;” and installing &lt;strong&gt;rbenv&lt;/strong&gt; with &lt;strong&gt;Bundler&lt;/strong&gt; manually after VM provisioning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is required if we are running Jekyll 2 and/or hosting our site at GitHub Pages (&lt;em&gt;as of January 2016 GitHub Pages running Jekyll 2.4.0&lt;/em&gt;). Python is also a dependency if we are using &lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt; syntax highlighter in Jekyll 3 instead of default &lt;a href=&quot;http://rouge.jneen.net/&quot;&gt;Rouge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; is used as JavaScript runtime for Jekyll 2. Deselect for Jekyll 3 projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HHVM&lt;/strong&gt; - deselect.&lt;/p&gt;

&lt;h3 id=&quot;other-options&quot;&gt;Other options&lt;/h3&gt;

&lt;p&gt;All other options for &lt;strong&gt;Databases&lt;/strong&gt;, &lt;strong&gt;Mail Tools&lt;/strong&gt;, &lt;strong&gt;Work Queues&lt;/strong&gt; and &lt;strong&gt;Search Servers&lt;/strong&gt; can be unchecked if you are not building something peculiar with Jekyll and 100% sure that some of these is a must.&lt;/p&gt;

&lt;h3 id=&quot;create-archive&quot;&gt;Create Archive&lt;/h3&gt;

&lt;p&gt;Now we can download a zip archive with resulted &lt;code&gt;Vagrantfile&lt;/code&gt; and Puppet provisioning scripts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/download_archive.png&quot; alt=&quot;download page&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-your-dotfiles&quot;&gt;Add your dotfiles&lt;/h3&gt;

&lt;p&gt;Unpack the archive. We can put desired &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.vimrc&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;, etc into the &lt;code&gt;/puphpet/files/dot/&lt;/code&gt; folder and they will be carefully placed into a home folder of our development VM.&lt;/p&gt;

&lt;h3 id=&quot;configyaml&quot;&gt;config.yaml&lt;/h3&gt;

&lt;p&gt;All provisioning settings are available in &lt;code&gt;puphpet/config.yaml&lt;/code&gt; file. Here, we can modify virtual machine resource allocation, port forwarding, shared folders, installed packages, etc.&lt;/p&gt;

&lt;p&gt;When all is ready, go into extracted folder and type &lt;code&gt;vagrant up&lt;/code&gt; to start provisioning.&lt;/p&gt;

&lt;h3 id=&quot;check-our-setup&quot;&gt;Check our setup&lt;/h3&gt;

&lt;p&gt;After VM provisioning is done, &lt;code&gt;vagrant ssh&lt;/code&gt; into VM and check that Jekyll is installed (&lt;em&gt;if Ruby installation via RVM is skipped, Jekyll and all its Ruby dependencies should be installed manually before these checks&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ jekyll --version
jekyll 2.4.0  # depends on specified version

# go to project dir (/var/www by default) and launch jekyll server:
$ cd /var/www
$ jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also ensure that jekyll development server is available from the host machine by loading &lt;code&gt;http://127.0.0.1:4000&lt;/code&gt; in a browser.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That’s all we need! Now you can focus on your Jekyll project isolated inside pre-configured environment and forget about risks to damage something by installing or updating your software. If things went wrong it is always possible to recreate environment from scratch using our Vagrantfile and Puppet scripts.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <author>
        <name>Pavel Dmytrenko</name>
        <email>mail@pavdmyt.com</email>
      </author>
      <title type="text">Python solutions for the Project Euler (problems 1-10)</title>
      
        <category term="python"/>
      
        <category term="math"/>
      
        <category term="ProjectEuler"/>
      
        <category term="algorithms"/>
      
      <link rel="alternate" type="text/html" href="http://pavdmyt.com/python-solutions-project-euler-01-10"/>
      <id>http://pavdmyt.com/Python-solutions-Project-Euler-01-10</id>
      <published>2016-01-13T00:00:00Z</published>
      <updated>2016-01-13T00:00:00Z</updated>
      <content type="html">&lt;p&gt;&lt;img src=&quot;/public/images/pyler-min.jpg&quot; alt=&quot;pic tag&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I have found &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler’s website&lt;/a&gt; and started writing scripts to solve &lt;a href=&quot;http://static.projecteuler.net/&quot;&gt;proposed problems&lt;/a&gt;. I’m not a regular visitor there, but over time a small collection of solutions has emerged. So, I decided to put results in order, push them to &lt;a href=&quot;https://github.com/pavdmyt/project-euler&quot;&gt;GitHub&lt;/a&gt; and share here a Python solutions for the first ten problems.&lt;/p&gt;

&lt;p&gt;I think given examples may be helpful for Python beginners as mathematical nature of the problems assists in showing pure Python in action on the most abstract use cases. Solutions below contain examples of utilizing following Python concepts: &lt;em&gt;generators&lt;/em&gt;, &lt;code&gt;lambda&lt;/code&gt; &lt;em&gt;functions&lt;/em&gt;, &lt;em&gt;slices&lt;/em&gt;, &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; &lt;em&gt;comprehensions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler Warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Subsequent sections provide ready-made solutions. It is highly recommended to read the next sections only if the subject problems are already solved by you. Otherwise it may cost you lots of inspirations and “Aha!” moments.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Real learning is an active process and seeing how it is done is a long way from experiencing that epiphany of discovery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;Jump to problem&lt;/em&gt;:
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-1&quot;&gt;1&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-2&quot;&gt;2&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-3&quot;&gt;3&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-4&quot;&gt;4&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-5&quot;&gt;5&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-6&quot;&gt;6&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-7&quot;&gt;7&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-8&quot;&gt;8&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-9&quot;&gt;9&lt;/a&gt; |
&lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-10&quot;&gt;10&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-1&quot;&gt;Problem 1&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Multiples of 3 and 5&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;/p&gt;
    &lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution is to produce a list of multiples of 3 and 5 using a &lt;em&gt;list comprehension&lt;/em&gt; combined with the &lt;em&gt;lambda function&lt;/em&gt; to check if a number is a valid multiple, and then &lt;code&gt;sum&lt;/code&gt; the resulted list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ismul = lambda x: x % 3 == 0 or x % 5 == 0
lst = [num for num in range(1000) if ismul(num)]
res = sum(lst)
print(res)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_1.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-2&quot;&gt;Problem 2&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Even Fibonacci numbers&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:&lt;/p&gt;
    &lt;p style=&quot;text-align:center&quot;&gt;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...&lt;/p&gt;
    &lt;p&gt;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s write a &lt;em&gt;generator&lt;/em&gt; &lt;code&gt;genfib&lt;/code&gt; for getting numbers from Fibonacci sequence and use &lt;em&gt;list comprehension&lt;/em&gt; to create a list of the even Fibonacci numbers. Then &lt;code&gt;sum&lt;/code&gt; the resulted list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;LIMIT = 4 * 10**6


def genfib(maxval):
    a, b = 1, 1
    while b &amp;lt; maxval:
        yield b
        a, b = b, a + b


def main():
    even_fib_nums = [num for num in genfib(LIMIT) if num % 2 == 0]
    res = sum(even_fib_nums)
    print(res)


if __name__ == &amp;#39;__main__&amp;#39;:
    main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_2.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-3&quot;&gt;Problem 3&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Largest prime factor&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29.&lt;/p&gt;
    &lt;p&gt;What is the largest prime factor of the number 600851475143 ?&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;This problem is the reference to the &lt;a href=&quot;https://www.mathsisfun.com/numbers/fundamental-theorem-arithmetic.html&quot;&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;. So, our goal is to find all &lt;em&gt;prime factors&lt;/em&gt; of the given number, or perform what is known as &lt;a href=&quot;http://www.mathsisfun.com/prime-factorization.html&quot;&gt;prime factorization&lt;/a&gt;. It is done by &lt;code&gt;prime_factors&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import math


def prime_factors(num):
    &amp;quot;&amp;quot;&amp;quot;
    Returns a list of primes factors for the given number.
    &amp;quot;&amp;quot;&amp;quot;
    factors = []
    # Handle 2
    while num % 2 == 0:
        factors.append(2)
        num /= 2

    # Handle all odd nums &amp;lt;= sqrt(num)
    for i in range(3, int(math.sqrt(num)) + 1, 2):
        while num % i == 0:
            factors.append(i)
            num /= i

    # Handle num is prime
    if num &amp;gt; 2:
        factors.append(num)

    return factors&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an &lt;a href=&quot;http://www.geeksforgeeks.org/print-all-prime-factors-of-a-given-number/&quot;&gt;explanation&lt;/a&gt; of the implemented algorithm.&lt;/p&gt;

&lt;p&gt;Now, having all prime factors, it’s easy enough to find the largest one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;factors = prime_factors(600851475143)
print(max(factors))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_3.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-4&quot;&gt;Problem 4&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Largest palindrome product&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;A palindromic number reads the same both ways.
       The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.&lt;/p&gt;
    &lt;p&gt;Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s find all possible products of two 3-digit numbers. It is done by &lt;em&gt;set comprehension&lt;/em&gt; to avoid duplicate products. Then using &lt;code&gt;filter&lt;/code&gt; we obtain only those products which are &lt;em&gt;palindromes&lt;/em&gt;. The last step is simply to find &lt;code&gt;max&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;rng = range(100, 1000)
products_set = {i*j for i in rng for j in rng}
is_palindrome = lambda num: str(num) == str(num)[::-1]
palindromes = filter(is_palindrome, products_set)
print(max(palindromes))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_4.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-5&quot;&gt;Problem 5&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Smallest multiple&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.&lt;/p&gt;
    &lt;p&gt;What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Evenly divisible&lt;/em&gt; means here divisible with no remainder. The approach to this problem is a simple bruteforce with some tweaks to minimize the number of unnecessary iterations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def is_divisible(num):
    &amp;quot;&amp;quot;&amp;quot;
    Checks if number is evenly divisible by all
    of the numbers from 1 to 20.
    &amp;quot;&amp;quot;&amp;quot;
    for i in [3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]:
        if num % i != 0:
            return False
    return True


def main():
    num = 2520
    while True:
        if is_divisible(num):
            print(num)
            break
        num += 20


if __name__ == &amp;#39;__main__&amp;#39;:
    main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First tweak is to exclude checks with 2, 5 and 10 inside &lt;code&gt;is_divisible&lt;/code&gt; function. Checks with 2 are omitted because if number is divisible by any &lt;em&gt;even&lt;/em&gt; number from the checklist, then it’s obviously also divisible by 2. Checks for 5 and 10 are excluded because these checks are covered by 15.&lt;/p&gt;

&lt;p&gt;Second tweak is to iterate only over a multiples of 20. That’s simply because by description the required number should be divisible by 20. This also implicitly covers checks with 20 which are intentionally avoided inside &lt;code&gt;is_divisible&lt;/code&gt; function. Sorry &lt;em&gt;Zen of Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_5.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-6&quot;&gt;Problem 6&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Sum square difference&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;The sum of the squares of the first ten natural numbers is,&lt;/p&gt;
    &lt;p style=&quot;text-align:center&quot;&gt;
      1&lt;sup&gt;2&lt;/sup&gt; + 2&lt;sup&gt;2&lt;/sup&gt; + ... + 10&lt;sup&gt;2&lt;/sup&gt; = 385&lt;/p&gt;
    &lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;
    &lt;p style=&quot;text-align:center&quot;&gt;
      (1 + 2 + ... + 10)&lt;sup&gt;2&lt;/sup&gt; = 55&lt;sup&gt;2&lt;/sup&gt; = 3025&lt;/p&gt;
    &lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.&lt;/p&gt;
    &lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution is straightforward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;find sum of the squares of the first one hundred natural numbers using &lt;em&gt;list comprehension&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;find square of the sum by using &lt;code&gt;sum&lt;/code&gt; on &lt;code&gt;range(101)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;print the difference&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Sum of the squares.
a = sum([i**2 for i in range(101)])

# Square of the sum.
b = sum(range(101))**2

# Result.
print(b - a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_6.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-7&quot;&gt;Problem 7&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;10001st prime&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.&lt;/p&gt;
    &lt;p&gt;What is the 10 001st prime number?&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The approach here is to iteratively perform a &lt;a href=&quot;https://en.wikipedia.org/wiki/Primality_test&quot;&gt;primality test&lt;/a&gt; until 10 001&lt;em&gt;st&lt;/em&gt; prime is found. Primality test is done via &lt;code&gt;is_prime&lt;/code&gt; function which returns &lt;code&gt;True&lt;/code&gt; if the input number is a &lt;em&gt;prime number&lt;/em&gt; or &lt;code&gt;False&lt;/code&gt; otherwise:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import math


def is_prime(num):
    &amp;quot;&amp;quot;&amp;quot;
    Checks that given number is a prime number.
    &amp;quot;&amp;quot;&amp;quot;
    if num &amp;lt;= 1:
        return False
    elif num &amp;lt;= 3:
        return True
    elif num % 2 == 0 or num % 3 == 0:
        return False
    for i in range(5, int(math.sqrt(num)) + 1, 6):
        if num % i == 0 or num % (i + 2) == 0:
            return False
    return True&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Implementation is based on dividing the given number &lt;code&gt;num&lt;/code&gt; by numbers of the form 6&lt;em&gt;k&lt;/em&gt; ± 1 less than or equal to &lt;code&gt;sqrt(num)&lt;/code&gt; and checking if &lt;code&gt;num&lt;/code&gt; is &lt;em&gt;divisible&lt;/em&gt; by these numbers.&lt;/p&gt;

&lt;p&gt;There are several optimizations adopted:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We eliminate testing &lt;em&gt;even&lt;/em&gt; divisors greater than 2.&lt;/li&gt;
  &lt;li&gt;We eliminate testing divisors greater than &lt;code&gt;sqrt(num)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Only divisors of the form 6&lt;em&gt;k&lt;/em&gt; ± 1 are used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why numbers of the form 6&lt;em&gt;k&lt;/em&gt; ± 1 are so special? It is known that &lt;em&gt;all&lt;/em&gt; integers can be expressed as 6&lt;em&gt;k&lt;/em&gt; + &lt;em&gt;i&lt;/em&gt;, where
&lt;em&gt;k&lt;/em&gt; - some integer and
&lt;em&gt;i&lt;/em&gt; = -1, 0, 1, 2, 3 or 4.&lt;/p&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if number leaves a remainder: &lt;code&gt;num % 6 == 0, 2 or 4&lt;/code&gt; then it is &lt;em&gt;even&lt;/em&gt; and therefore &lt;em&gt;non-prime&lt;/em&gt; (unless it is 2)&lt;/li&gt;
  &lt;li&gt;if it leaves a remainder of 3: &lt;code&gt;num % 6 == 3&lt;/code&gt;, it’s divisible of 3 and therefore &lt;em&gt;non-prime&lt;/em&gt; (unless it is 3)&lt;/li&gt;
  &lt;li&gt;only remainders of 1 or 5 are left, which are numbers of the form 6&lt;em&gt;k&lt;/em&gt; ± 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, with &lt;code&gt;is_prime&lt;/code&gt; function, solution is a simple loop which counts &lt;em&gt;primes&lt;/em&gt; till it reaches 10 001st one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;counter = 1
num = 1
while counter &amp;lt; 10001:
    num += 2
    if is_prime(num):
        counter += 1
print(num)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_7.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-8&quot;&gt;Problem 8&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Largest product in a series&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.&lt;/p&gt;
    &lt;p style=&quot;font-family:courier new;text-align:center;&quot;&gt;
    73167176531330624919225119674426574742355349194934&lt;br /&gt;
    96983520312774506326239578318016984801869478851843&lt;br /&gt;
    85861560789112949495459501737958331952853208805511&lt;br /&gt;
    12540698747158523863050715693290963295227443043557&lt;br /&gt;
    66896648950445244523161731856403098711121722383113&lt;br /&gt;
    62229893423380308135336276614282806444486645238749&lt;br /&gt;
    30358907296290491560440772390713810515859307960866&lt;br /&gt;
    70172427121883998797908792274921901699720888093776&lt;br /&gt;
    65727333001053367881220235421809751254540594752243&lt;br /&gt;
    52584907711670556013604839586446706324415722155397&lt;br /&gt;
    53697817977846174064955149290862569321978468622482&lt;br /&gt;
    83972241375657056057490261407972968652414535100474&lt;br /&gt;
    82166370484403199890008895243450658541227588666881&lt;br /&gt;
    16427171479924442928230863465674813919123162824586&lt;br /&gt;
    17866458359124566529476545682848912883142607690042&lt;br /&gt;
    24219022671055626321111109370544217506941658960408&lt;br /&gt;
    07198403850962455444362981230987879927244284909188&lt;br /&gt;
    84580156166097919133875499200524063689912560717606&lt;br /&gt;
    05886116467109405077541002256983155200055935729725&lt;br /&gt;
    71636269561882670428252483600823257530420752963450&lt;br /&gt;
    &lt;/p&gt;
    &lt;p&gt;Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution consists from the function &lt;code&gt;get_product&lt;/code&gt; which calculates products of the digits inside input string and the loop which slices 13-digit strings, calculates products and pushes results into the &lt;code&gt;products&lt;/code&gt; list. Then maximal value from the &lt;code&gt;products&lt;/code&gt; is printed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;NUM = &amp;quot;&amp;quot;&amp;quot;
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
&amp;quot;&amp;quot;&amp;quot;


def get_product(num_str):
    &amp;quot;&amp;quot;&amp;quot;
    Returns a product of digits in the given `num_str`.
    42  -&amp;gt; 4 * 2 = 8
    &amp;quot;&amp;quot;&amp;quot;
    if &amp;#39;0&amp;#39; in num_str:
        return 0
    res = 1
    for digit in num_str:
        res *= int(digit)
    return res


def main():
    # Remove newlines.
    input = NUM.replace(&amp;#39;\n&amp;#39;, &amp;#39;&amp;#39;)

    products = []
    for i in range(len(NUM)):
        num_slice = input[i:i+13]
        products.append(get_product(num_slice))
    print(max(products))


if __name__ == &amp;#39;__main__&amp;#39;:
    main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_8.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-9&quot;&gt;Problem 9&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Special Pythagorean triplet&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;A Pythagorean triplet is a set of three natural numbers,
       &lt;var&gt;a&lt;/var&gt; &amp;lt; &lt;var&gt;b&lt;/var&gt; &amp;lt; &lt;var&gt;c&lt;/var&gt;,
       for which,&lt;/p&gt;
    &lt;p style=&quot;text-align:center&quot;&gt;
      &lt;var&gt;a&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; + &lt;var&gt;b&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;var&gt;c&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
    &lt;p&gt;For example,
       3&lt;sup&gt;2&lt;/sup&gt; + 4&lt;sup&gt;2&lt;/sup&gt; = 9 + 16 = 25 = 5&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;
    &lt;p&gt;There exists exactly one Pythagorean triplet for which
       &lt;var&gt;a&lt;/var&gt; + &lt;var&gt;b&lt;/var&gt; + &lt;var&gt;c&lt;/var&gt; = 1000.&lt;br /&gt;
       Find the product &lt;var&gt;abc&lt;/var&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we need a way to generate &lt;em&gt;all&lt;/em&gt; possible &lt;em&gt;pythagorean triples&lt;/em&gt;, meaning both &lt;em&gt;primitive&lt;/em&gt; and &lt;em&gt;non-primitive&lt;/em&gt;, till triple (&lt;em&gt;a, b, c&lt;/em&gt;) is found, where &lt;em&gt;a + b + c&lt;/em&gt; = 1000. &lt;a href=&quot;https://en.wikipedia.org/wiki/Formulas_for_generating_Pythagorean_triples#Dickson.27s_method&quot;&gt;Dickson’s method&lt;/a&gt; have been chosen for generating triples. It is easy to implement, fast enough and, most importantly, it generates &lt;em&gt;all&lt;/em&gt; pythagorean triples.&lt;/p&gt;

&lt;h3 id=&quot;dicksons-method-in-a-nutshell&quot;&gt;Dickson’s method in a nutshell&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;To find integer solutions to
       &lt;var&gt;a&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; + &lt;var&gt;b&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; + &lt;var&gt;c&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;,&lt;br /&gt;
       find positive integers &lt;var&gt;r&lt;/var&gt;, &lt;var&gt;s&lt;/var&gt;, and &lt;var&gt;t&lt;/var&gt; such that &lt;var&gt;r&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; = 2&lt;var&gt;st&lt;/var&gt;&lt;br /&gt;
       (&lt;var&gt;r&lt;/var&gt; is any &lt;i&gt;even&lt;/i&gt; integer).&lt;/p&gt;
    &lt;p&gt;Then:&lt;/p&gt;
    &lt;p&gt;&lt;var&gt;a&lt;/var&gt; = &lt;var&gt;r&lt;/var&gt; + &lt;var&gt;s&lt;/var&gt;&lt;br /&gt;
       &lt;var&gt;b&lt;/var&gt; = &lt;var&gt;r&lt;/var&gt; + &lt;var&gt;t&lt;/var&gt;&lt;br /&gt;
       &lt;var&gt;c&lt;/var&gt; = &lt;var&gt;r&lt;/var&gt; + &lt;var&gt;s&lt;/var&gt; + &lt;var&gt;t&lt;/var&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;Choose &lt;var&gt;r&lt;/var&gt; = 4.
       Then &lt;var&gt;r&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; / 2 = 8.&lt;br /&gt;
       The two factor-pairs of 8 are: (1, 8), (2, 4).&lt;/p&gt;
    &lt;p&gt;Every factor-pair will produce a triple using above equations:&lt;/p&gt;
    &lt;p&gt;&lt;var&gt;s&lt;/var&gt; = 1, &lt;var&gt;t&lt;/var&gt; = 8 produces triple (5, 12, 13)&lt;br /&gt;
       &lt;var&gt;s&lt;/var&gt; = 2, &lt;var&gt;t&lt;/var&gt; = 4 produces triple (6, 8, 10)&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the examples above it is clear that we need a means to generate a factor-pairs of the given number. Let’s implement this via following &lt;em&gt;generator&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import math


def gen_divisor_pairs(num):
    &amp;quot;&amp;quot;&amp;quot;
    Generates factor-pairs of the given number.
    E.g. factor-pairs of 18 are: (1, 18), (2, 9), (3, 6)
    &amp;quot;&amp;quot;&amp;quot;
    for divisor in range(1, int(math.sqrt(num)) + 1):
        if num % divisor == 0:
            yield divisor, num // divisor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, having &lt;code&gt;gen_divisor_pairs&lt;/code&gt; in our toolset, implementation of Dickson’s method is straightforward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def gen_triples():
    &amp;quot;&amp;quot;&amp;quot;
    Generates Pythagorean triples using Dickson&amp;#39;s method.
    To find triples: a^2 + b^2 = c^2,
    find ints r, s and t such that: r^2 = 2*s*t
    Then:
      a = r + s, b = r + t, c = r + s + t
    &amp;quot;&amp;quot;&amp;quot;
    r = 2  # any even int.
    while True:
        st = r**2 // 2
        pairs = [pair for pair in gen_divisor_pairs(st)]
        for pair in pairs:
            s, t = pair
            yield r + s, r + t, r + s + t
        r += 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, let’s find a pythagorean triple for which &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c&lt;/em&gt; = 1000 and calculate a product of &lt;em&gt;abc&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;for triple in gen_triples():
    if sum(triple) == 1000:
        a, b, c = triple
        print(a * b * c)
        break&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_9.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-10&quot;&gt;Problem 10&lt;/h2&gt;

&lt;div style=&quot;font-family:courier new&quot;&gt;Summation of primes&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;font-size:90%&quot;&gt;
    &lt;p&gt;The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.&lt;/p&gt;
    &lt;p&gt;Find the sum of all the primes below two million.&lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we need to find all primes below 2 000 000. To solve this problem we might have used &lt;code&gt;is_prime&lt;/code&gt; function from &lt;a href=&quot;/python-solutions-project-euler-01-10/#problem-7&quot;&gt;Problem 7&lt;/a&gt; to build a loop which checks &lt;em&gt;odd&lt;/em&gt; numbers below two million and add them up if number being checked is &lt;em&gt;prime&lt;/em&gt;. However such approach is very slow and inefficient. To find all &lt;em&gt;primes&lt;/em&gt; below given number, commonly different kinds of &lt;a href=&quot;http://mathworld.wolfram.com/Sieve.html&quot;&gt;sieves&lt;/a&gt; are used. We will utilize well-known &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;sieve of Eratosthenes&lt;/a&gt; for our purposes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import math


def sieve_Erat(num):
    &amp;quot;&amp;quot;&amp;quot;
    Returns all primes below given number.
    Sieve of Eratosthenes is used.
    &amp;quot;&amp;quot;&amp;quot;
    sieve = [True] * (num + 1)
    for i in range(2, int(math.sqrt(num)) + 1):
        if sieve[i]:
            sieve[i*i::i] = [False] * len(sieve[i*i::i])
    return [i for i in range(2, num + 1) if sieve[i]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;em&gt;list slice&lt;/em&gt; notation is used to speed up the process. It can be further improved by skipping &lt;em&gt;even numbers&lt;/em&gt; in all loops, etc. But it’s not done for the sake of simplicity. Check &lt;a href=&quot;http://stackoverflow.com/a/2068548&quot;&gt;fast sieve implementations in Python&lt;/a&gt; if you want to challenge yourself.&lt;/p&gt;

&lt;p&gt;Finally:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;res = sieve_Erat(2000000)
print(sum(res))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pavdmyt/project-euler/blob/master/problem_10.py&quot;&gt;View at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Of course given examples may be simplified further or we can work hard on our algorithms to optimize performance or try more advanced techniques. My goal here was to find a balance between &lt;em&gt;simplicity&lt;/em&gt; and &lt;em&gt;readability&lt;/em&gt; vs &lt;em&gt;complexity&lt;/em&gt; of adopted algorithms, leaving a space to demonstrate some of Python concepts.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <author>
        <name>Pavel Dmytrenko</name>
        <email>mail@pavdmyt.com</email>
      </author>
      <title type="text">How to implement Tags at Jekyll website</title>
      
        <category term="jekyll"/>
      
        <category term="liquid"/>
      
        <category term="blogging"/>
      
      <link rel="alternate" type="text/html" href="http://pavdmyt.com/how-to-implement-tags-at-jekyll-website"/>
      <id>http://pavdmyt.com/How-to-implement-tags-at-jekyll-website</id>
      <published>2015-10-14T00:00:00Z</published>
      <updated>2015-10-14T00:00:00Z</updated>
      <content type="html">&lt;p&gt;&lt;img src=&quot;/public/images/Calf_with_eartag.jpg&quot; alt=&quot;ear tag&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I have finished adding tagging infrastructure into this website. That’s was a bit tricky since Jekyll does not fully support this feature from the box. It is possible to add tags into the post’s &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;YAML front matter&lt;/a&gt; and then access them using &lt;a href=&quot;http://jekyllrb.com/docs/variables/#page-variables&quot;&gt;page varialbes&lt;/a&gt; via &lt;code&gt;page.tags&lt;/code&gt;. However, there are no built-in means to generate &lt;em&gt;tags page&lt;/em&gt; which collects all tags from the posts, sorts them alphabetically and builds a list of the posts assigned to every tag. Let’s take a look at one possible way to implement described functionality.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;creating-tags-boilerplate&quot;&gt;Creating Tags boilerplate&lt;/h2&gt;

&lt;p&gt;First, let’s decide how our tags will look and feel. I’ve chosen &lt;a href=&quot;http://codepen.io/wbeeftink/pen/dIaDH&quot;&gt;CSS tags by Wouter Beeftink&lt;/a&gt;. Let’s add them to our site’s CSS. HTML part contains example on how to add a single tag or a list of tags to the page. Let’s grab it and modify a bit using Jekyll templating language - &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt;. I want to see tags at both &lt;em&gt;index page&lt;/em&gt; and at each &lt;em&gt;post page&lt;/em&gt;, so I added following code snippets:&lt;/p&gt;

&lt;h3 id=&quot;indexhtml&quot;&gt;index.html&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;ul class=&amp;quot;tags&amp;quot;&amp;gt;
{% for tag in post.tags %}
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags#{{ tag }}&amp;quot; class=&amp;quot;tag&amp;quot;&amp;gt;{{ tag }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;layoutsposthtml&quot;&gt;_layouts/post.html&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;ul class=&amp;quot;tags&amp;quot;&amp;gt;
  {% for tag in page.tags %}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags#{{ tag }}&amp;quot; class=&amp;quot;tag&amp;quot;&amp;gt;{{ tag }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This assumes that we have &lt;em&gt;tags page&lt;/em&gt; in the root of our Jekyll project. Let’s create dummy &lt;em&gt;tags page&lt;/em&gt; for a time being:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cd your_jekyll_project
$ touch tags.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Later we will fill it with the code to generate a list of tags and related posts. To see the tags at the &lt;em&gt;index page&lt;/em&gt; and &lt;em&gt;post page&lt;/em&gt; we have to tag our posts. It is done using &lt;code&gt;tags&lt;/code&gt; variable inside each post’s YAML front matter. As an example, this post’s &lt;code&gt;tags&lt;/code&gt; variable is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;tags: jekyll liquid blogging&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After adding tags to posts we should be able to see shiny new tags at our pages.&lt;/p&gt;

&lt;h2 id=&quot;tags-page&quot;&gt;Tags page&lt;/h2&gt;

&lt;p&gt;Our &lt;em&gt;tags page&lt;/em&gt; should:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;List all of the tags from the site alphabetically.&lt;/li&gt;
  &lt;li&gt;Assign each post with specific tag to the appropriate &lt;em&gt;tag section&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As an example look here: &lt;a href=&quot;http://pavdmyt.com/tags/&quot;&gt;http://pavdmyt.com/tags/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This task requires some advanced knowledge of Liquid. But fortunately I found this &lt;a href=&quot;http://blog.lanyonm.org/articles/2013/11/21/alphabetize-jekyll-page-tags-pure-liquid.html&quot;&gt;article&lt;/a&gt;, which helped me a lot. I modified provided example for my needs, but main logic remains the same. So, basically our &lt;em&gt;tags.md&lt;/em&gt; consists from 3 parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Building a sorted array of the &lt;em&gt;tag names&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!-- Get the tag name for every tag on the site and set them
to the `site_tags` variable. --&amp;gt;
{% capture site_tags %}{% for tag in site.tags %}{{ tag | first }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endcapture %}

&amp;lt;!-- `tag_words` is a sorted array of the tag names. --&amp;gt;
{% assign tag_words = site_tags | split:&amp;#39;,&amp;#39; | sort %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Listing all tags. Each tag is &lt;a href=&quot;http://www.w3schools.com/html/html_links.asp&quot;&gt;HTML bookmark&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!-- List of all tags --&amp;gt;
&amp;lt;ul class=&amp;quot;tags&amp;quot;&amp;gt;
  {% for item in (0..site.tags.size) %}{% unless forloop.last %}
    {% capture this_word %}{{ tag_words[item] }}{% endcapture %}
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&amp;quot;#{{ this_word | cgi_escape }}&amp;quot; class=&amp;quot;tag&amp;quot;&amp;gt;{{ this_word }}
        &amp;lt;span&amp;gt;({{ site.tags[this_word].size }})&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  {% endunless %}{% endfor %}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Creating &lt;em&gt;tag sections&lt;/em&gt; with related posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!-- Posts by Tag --&amp;gt;
&amp;lt;div&amp;gt;
  {% for item in (0..site.tags.size) %}{% unless forloop.last %}
    {% capture this_word %}{{ tag_words[item] }}{% endcapture %}
    &amp;lt;h2 id=&amp;quot;{{ this_word | cgi_escape }}&amp;quot;&amp;gt;{{ this_word }}&amp;lt;/h2&amp;gt;
    {% for post in site.tags[this_word] %}{% if post.title != null %}
      &amp;lt;div&amp;gt;
        &amp;lt;span style=&amp;quot;float: left;&amp;quot;&amp;gt;
          &amp;lt;a href=&amp;quot;{{ post.url }}&amp;quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
        &amp;lt;/span&amp;gt;
        &amp;lt;span style=&amp;quot;float: right;&amp;quot;&amp;gt;
          {{ post.date | date_to_string }}
        &amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div style=&amp;quot;clear: both;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    {% endif %}{% endfor %}
  {% endunless %}{% endfor %}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More details and explanations could be found in the mentioned &lt;a href=&quot;http://blog.lanyonm.org/articles/2013/11/21/alphabetize-jekyll-page-tags-pure-liquid.html&quot;&gt;article&lt;/a&gt;. A good reference on Liquid &lt;em&gt;tags&lt;/em&gt; and &lt;em&gt;filters&lt;/em&gt; available in &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid for Designers&lt;/a&gt;. Jekyll-specific Liquid &lt;em&gt;tags&lt;/em&gt; and &lt;em&gt;filters&lt;/em&gt; described in &lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot;&gt;Jekyll docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That’s all we need! Feel free to dig around &lt;a href=&quot;https://github.com/pavdmyt/pavdmyt.github.io&quot;&gt;source code&lt;/a&gt; to understand how &lt;em&gt;tags&lt;/em&gt; are implemented here.&lt;/p&gt;

&lt;div style=&quot;font-size: 15px;&quot;&gt;
  &lt;i&gt;Header image is a resized
    &lt;a href=&quot;https://www.flickr.com/photos/dcysurfer/5490805281/&quot;&gt;Photo by Dave Young&lt;/a&gt;,
  available under a
    &lt;a href=&quot;https://en.wikipedia.org/wiki/Creative_Commons&quot;&gt;Creative Commons&lt;/a&gt;
    &lt;a href=&quot;https://creativecommons.org/licenses/by/2.0/deed.en&quot;&gt;Attribution 2.0 Generic&lt;/a&gt;
  license.&lt;/i&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <author>
        <name>Pavel Dmytrenko</name>
        <email>mail@pavdmyt.com</email>
      </author>
      <title type="text">Digging around factorial function</title>
      
        <category term="python"/>
      
        <category term="math"/>
      
        <category term="algorithms"/>
      
      <link rel="alternate" type="text/html" href="http://pavdmyt.com/digging-around-factorial-function"/>
      <id>http://pavdmyt.com/Digging-around-factorial-function</id>
      <published>2015-10-01T00:00:00Z</published>
      <updated>2015-10-01T00:00:00Z</updated>
      <content type="html">&lt;p&gt;&lt;a href=&quot;https://gist.github.com/fmeyer/289467&quot;&gt;Evolution of a Python programmer&lt;/a&gt; is a brilliant example of Python code produced by people with different backgrounds to solve a mostly simple problem of finding a factorial of the given number. Unfortunately it lacks solution which might be hypothetically produced by mathematician. Let’s add some entropy to the Universe and implement a weird factorial calculation using exponential function and logarithms:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/math_fla.jpg&quot; alt=&quot;analytical expression&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The series in the exponent can be represented as a &lt;em&gt;list comprehension&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;[math.log(k) for k in range(1, x + 1)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;For the final solution let’s find a &lt;code&gt;sum&lt;/code&gt; of the series and put it inside &lt;code&gt;math.exp()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import math as m
def fact(x):
    return m.exp(sum([m.log(k) for k in range(1, x+1)]))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But unfortunately, such calculation provides distorted results. We are dealing here with floating-point numbers, this results in the &lt;a href=&quot;https://docs.python.org/3/tutorial/floatingpoint.html&quot;&gt;issues and limitations&lt;/a&gt; which are caused by the fact that floating-point numbers are represented in computer hardware as base 2 (binary) fractions. Let’s &lt;code&gt;import math as m&lt;/code&gt; and examine the output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/ipython_run.jpg&quot; alt=&quot;ipython session&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As can be seen there is a lot of ugliness after the decimal point. It is not allowable for our hypothetical mathematician! Moreover, our weird implementation is much more slower than the common iterative factorial function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/ipython_timeit.jpg&quot; alt=&quot;ipython timeit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s fix the situation and try to write the function that calculates factorial of the given number and which is faster then the common iterative implementation. Recursive implementation is not considered because recursion in Python requires the allocation of a new stack frame and thus (in general) slower.&lt;/p&gt;

&lt;h2 id=&quot;fast-factorial&quot;&gt;Fast factorial&lt;/h2&gt;

&lt;p&gt;I was inspired by the method to &lt;em&gt;half the amount of multiplying&lt;/em&gt; from this &lt;a href=&quot;https://sites.google.com/site/examath/research/factorials&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To half the multiplication with even numbers, you will end up with the number, divided by two, factors. The first factor will be the number you are taking the factorial of, then the next will be that number plus that number minus two. The next number will be the previous number plus the lasted added number minus two. You are done when the last number you added was two.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example from the article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2 = 20) &lt;br /&gt;
8! = 8 * 14 * 18 * 20&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pay attention to the bold numbers:&lt;/p&gt;

&lt;p&gt;8! = &lt;strong&gt;8&lt;/strong&gt; * (8 + &lt;strong&gt;6&lt;/strong&gt; = 14) * (14 + &lt;strong&gt;4&lt;/strong&gt; = 18) * (18 + &lt;strong&gt;2&lt;/strong&gt; = 20)&lt;/p&gt;

&lt;p&gt;So, basically we have a list of the numbers &lt;code&gt;[8, 6, 4, 2]&lt;/code&gt; which can be used to find &lt;em&gt;factors&lt;/em&gt; of &lt;code&gt;8!&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;8! = 8 * 14 * 18 * 20 =

(8) *
(8 + 6) *
(8 + 6 + 4) *
(8 + 6 + 4 + 2) =
40320&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, it becomes clear how to implement described logic in Python. All we need is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build a list of the &lt;em&gt;even&lt;/em&gt; numbers including and below given number, e.g. for &lt;code&gt;10!&lt;/code&gt; it should be &lt;code&gt;[10, 8, 6, 4, 2]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Each iteration finds next &lt;em&gt;factor&lt;/em&gt; by adding the elements of the list: &lt;code&gt;10, 10 + 8, ..., 10 + 8 + 6 + 4 + 2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Each iteration multiplies found &lt;em&gt;factors&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def fast_fact(x):
    res = 1
    i = 0
    nums = range(x, 0, -2)
    for num in nums:
        i += num
        res *= i
    return res&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait. This method works for &lt;em&gt;even&lt;/em&gt; numbers, how about &lt;em&gt;odd&lt;/em&gt; ones? The most natural solution that comes to mind is finding a factorial of the &lt;em&gt;even&lt;/em&gt; number before the &lt;em&gt;odd&lt;/em&gt; and times it by the &lt;em&gt;odd&lt;/em&gt; number &lt;code&gt;9! = 8! * 9&lt;/code&gt;. Let’s add a hook to our function to handle &lt;em&gt;odd&lt;/em&gt; numbers too:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def fast_fact(x):
    if x % 2:
        res = x
        x -= 1
    else:
        res = 1

    i = 0
    nums = range(x, 0, -2)
    for num in nums:
        i += num
        res *= i
    return res&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://sites.google.com/site/examath/research/factorials&quot;&gt;Article&lt;/a&gt; also mentions another method to handle &lt;em&gt;odd&lt;/em&gt; numbers but we will not implement it since this makes solution more complicated and clarity also suffers. Now, let’s &lt;code&gt;timeit&lt;/code&gt; against iterative factorial from the first part of our investigation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/ipython_timeit2.jpg&quot; alt=&quot;ipython timeit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now our hypothetical mathematician can be satisfied.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All code from the article is available here:&lt;/em&gt; &lt;a href=&quot;https://gist.github.com/pavdmyt/3b99e9b499289e072a48&quot;&gt;some_factorials.py&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <author>
        <name>Pavel Dmytrenko</name>
        <email>mail@pavdmyt.com</email>
      </author>
      <title type="text">Python zip( ) Fu</title>
      
        <category term="python"/>
      
      <link rel="alternate" type="text/html" href="http://pavdmyt.com/python-zip-fu"/>
      <id>http://pavdmyt.com/Python-zip-fu</id>
      <published>2015-09-27T00:00:00Z</published>
      <updated>2015-09-27T00:00:00Z</updated>
      <content type="html">&lt;p&gt;In functional programming iterating over few things simultaneously is called “&lt;a href=&quot;http://stackoverflow.com/a/1115570&quot;&gt;zip&lt;/a&gt;”. Python has built-in &lt;code&gt;zip&lt;/code&gt; function for this. From the docs:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;zip&lt;/strong&gt;(&lt;em&gt;*iterables&lt;/em&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make an iterator that aggregates elements from each of the iterables.&lt;/p&gt;

  &lt;p&gt;Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As an example, lets consider iteration over two lists:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; vals = [55, 89, 144, 233]
&amp;gt;&amp;gt;&amp;gt; for col, val in zip(colors, vals):
...     print(col, val)
...
(&amp;#39;red&amp;#39;, 55)
(&amp;#39;green&amp;#39;, 89)
(&amp;#39;blue&amp;#39;, 144)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;As you might have noticed, example code produced exactly 3 tuples. This is equal to the length of the shortest input sequence, i.e. &lt;code&gt;colors&lt;/code&gt;. Such behavior is acceptable when we don’t care about trailing, unmatched values from the longer sequences. Otherwise, usage of &lt;code&gt;itertools.zip_longest()&lt;/code&gt; should be considered (&lt;em&gt;Python 3 only&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Well, you say that’s great, but where begins the real power of &lt;code&gt;zip&lt;/code&gt;? It begins when using &lt;code&gt;zip&lt;/code&gt; in conjunction with the &lt;code&gt;*&lt;/code&gt; operator.&lt;/p&gt;

&lt;h2 id=&quot;zip--and-the-power-of-unpacking&quot;&gt;zip( ) and the power of unpacking&lt;/h2&gt;

&lt;p&gt;Star &lt;code&gt;*&lt;/code&gt; operator unpacks the sequence into positional arguments, as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def puts(arg1, arg2):
...     print(arg1)
...     print(arg2)
...
&amp;gt;&amp;gt;&amp;gt; args = (&amp;#39;spam&amp;#39;, &amp;#39;eggs&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; puts(*args)
spam
eggs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When &lt;code&gt;*args&lt;/code&gt; passed to the &lt;code&gt;puts&lt;/code&gt;, it’s values &lt;em&gt;unpacked&lt;/em&gt; into the function’s positional arguments &lt;code&gt;arg1&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;. It’s the same as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;arg1, arg2 = (&amp;#39;spam&amp;#39;, &amp;#39;eggs&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Utilizing this property and what we have learned about &lt;code&gt;zip&lt;/code&gt;, let’s solve few problems in a &lt;em&gt;pythonic&lt;/em&gt; manner:&lt;/p&gt;

&lt;h3 id=&quot;group-x-and-y-components-of-the-vectors-into-separate-lists&quot;&gt;group &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; components of the vectors into separate lists&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dots = [(1, 3), (2, 4), (3, 5)]
&amp;gt;&amp;gt;&amp;gt; x_lst, y_lst = zip(*dots)
&amp;gt;&amp;gt;&amp;gt; x_lst
(1, 2, 3)
&amp;gt;&amp;gt;&amp;gt; y_lst
(3, 4, 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;transpose-a-matrix&quot;&gt;transpose a matrix&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; mtx = [(1, 2),
...        (3, 4),
...        (5, 6)]
&amp;gt;&amp;gt;&amp;gt; zip(*mtx)
[(1, 3, 5), (2, 4, 6)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;rotate-a-matrix&quot;&gt;rotate a matrix&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; zip(*mtx[::-1])
[(5, 3, 1), (6, 4, 2)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;clustering-a-data-series-into-n-length-groups-idiom&quot;&gt;clustering a data series into n-length groups idiom&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; seq = range(1, 10)
&amp;gt;&amp;gt;&amp;gt; zip(*[iter(seq)]*3)
[(1, 2, 3), (4, 5, 6), (7, 8, 9)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last is difficult at glance. Here is a &lt;a href=&quot;http://stackoverflow.com/a/2233247&quot;&gt;good explanation&lt;/a&gt; of what is actually happening. In short, the above code snippet is the same as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = iter(range(1, 10))
&amp;gt;&amp;gt;&amp;gt; zip(x, x, x)
[(1, 2, 3), (4, 5, 6), (7, 8, 9)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Try to play with it!&lt;/p&gt;

&lt;h2 id=&quot;python-dictionaries-and-zip-&quot;&gt;Python dictionaries and zip( )&lt;/h2&gt;

&lt;p&gt;Now, let’s take a look on how &lt;code&gt;zip&lt;/code&gt; can be used to manipulate &lt;code&gt;dict&lt;/code&gt;. When you have &lt;em&gt;keys&lt;/em&gt; and &lt;em&gt;values&lt;/em&gt; stored in different places, &lt;code&gt;zip&lt;/code&gt; provides a convenient way to glue them together into the single &lt;code&gt;dict&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; keys = [&amp;#39;spam&amp;#39;, &amp;#39;eggs&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; vals = [42, 1729]
&amp;gt;&amp;gt;&amp;gt; d = dict(zip(keys, vals))
&amp;gt;&amp;gt;&amp;gt; d
{&amp;#39;eggs&amp;#39;: 1729, &amp;#39;spam&amp;#39;: 42}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can invert (i.e. swap keys and values) our &lt;code&gt;dict&lt;/code&gt; simply using &lt;code&gt;dict.values()&lt;/code&gt; and &lt;code&gt;dict.keys()&lt;/code&gt; methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; inv_d = dict(zip(d.values(), d.keys()))
&amp;gt;&amp;gt;&amp;gt; inv_d
{1729: &amp;#39;eggs&amp;#39;, 42: &amp;#39;spam&amp;#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget that &lt;code&gt;dict&lt;/code&gt; keys should be &lt;em&gt;hashable&lt;/em&gt; values because basically &lt;code&gt;dict&lt;/code&gt; is a hash table.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Python built-in &lt;code&gt;zip&lt;/code&gt; function helps to iterate over few sequences in parallel. Combined with &lt;em&gt;unpacking&lt;/em&gt; and different list manipulation techniques like &lt;em&gt;slicing&lt;/em&gt; and &lt;em&gt;comprehensions&lt;/em&gt; it becomes a really handy tool. Moreover, combined with other functional programming tools like &lt;code&gt;lambda&lt;/code&gt; expressions and &lt;code&gt;map&lt;/code&gt; function it facilitates creation of readable code avoiding excessive usage of loop constructs. A good example could be found here: &lt;a href=&quot;https://bradmontgomery.net/blog/2013/04/01/pythons-zip-map-and-lambda/&quot;&gt;Python’s zip, map, and lambda&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
  
</feed>
